// Assigment 10: Data Structures
// Name: Samantha Gonzalez
// Date: 05/12/2025
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
using namespace std;

//Graph class
class Graph {
    int V;
    vector<vector<int>> adj;

public:
    explicit Graph(int V);
    void addEdge(int v, int w);
    void BFS(int start) const;
    void DFS(int start) const;
};

//Constructor
Graph::Graph(int V) {
    this->V = V;
    adj.resize(V);
}

//Add Edge to Graph
void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
    adj[w].push_back(v);
}

//BFS Statement Function
void Graph::BFS(const int start) const
{
    vector<bool> visited(V, false);
    queue<int> q;

    //Vertex Selection
    visited[start] = true;
    cout << start << " ";
    q.push(start);

    //While
    while (!q.empty()) {
        const int variable = q.front();
        q.pop();

        //Unvisited adjacent vertices
        for (int neighbor : adj[variable]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                cout << neighbor << " ";
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}

//DFS Function
void Graph::DFS(const int start) const
{
    vector<bool> visited(V, false);
    stack<int> s;

    //Select a vertex
    visited[start] = true;
    cout << start << " ";
    s.push(start);

    //While stack is not empty
    while (!s.empty()) {
        int variable = s.top();
        bool foundUnvisited = false;

        //Locate unvisited adjacent vertex
        for (int neighbor : adj[variable]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                cout << neighbor << " ";
                s.push(neighbor);
                foundUnvisited = true;
                break;
            }
        }

        if (!foundUnvisited) {
            s.pop();
        }
    }
    cout << endl;
}

//Final Output
int main() {
    Graph g(6);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 6);

    cout << "Breadth First Traversal starting from vertex 0:\n";
    g.BFS(0);

    cout << "Depth First Traversal starting from vertex 0:\n";
    g.DFS(0);

    return 0;
}
